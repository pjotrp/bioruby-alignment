#!/usr/bin/env ruby
#
# BioRuby bio-alignment Plugin
# Author:: Pjotr Prins
# Copyright:: 2012
# License:: The Ruby License

rootpath = File.dirname(File.dirname(__FILE__))
$: << File.join(rootpath,'lib')

_VERSION = File.new(File.join(rootpath,'VERSION')).read.chomp

$stderr.print "bio-alignment "+_VERSION+" Copyright (C) 2012 Pjotr Prins <pjotr.prins@thebird.nl>\n\n"

USAGE =<<EOU

bio-alignment transforms alignments

EOU

if ARGV.size == 0
  print USAGE
end

require 'bio-alignment'
require 'optparse'
require 'bio-logger'
include Bio::BioAlignment

log = Bio::Log::LoggerPlus.new 'bio-alignment'

Bio::Log::CLI.logger('stderr')
Bio::Log::CLI.trace('info')

options = {show_help: false}
options[:show_help] = true if ARGV.size == 0
opts = OptionParser.new do |o|
  o.banner = "Usage: #{File.basename($0)} [options] filename\n\n"

  o.on('--type codon|nucleotide|aminoacid', [:codon,:nucleotide,:aminoacid], 'Type of sequence data (default auto)') do |type|
    options[:type] = type.to_sym
  end

  o.on('--edit bridges|islands|info', [:bridges,:islands,:info], 'Apply edit function') do |edit|
    options[:edit] = edit.to_sym
  end

  o.on('--perc value', Integer, 'Percentage') do |v|
    options[:perc] = v
  end

  o.on('--out fasta', [:fasta], 'Output format') do |format|
    options[:out] = format.to_sym
  end

  o.on('--style codon', [:codon], 'Output style') do |style|
    options[:style] = style.to_sym
  end

  o.separator ""

  o.on("--logger filename",String,"Log to file (default stderr)") do | name |
    Bio::Log::CLI.logger(name)
  end
  
  o.on("--trace options",String,"Set log level (default INFO, see bio-logger)") do | s |
    Bio::Log::CLI.trace(s)
  end
  
  o.on("-q", "--quiet", "Run quietly") do |q|
    Bio::Log::CLI.trace('error')
  end
  
  o.on("-v", "--verbose", "Run verbosely") do |v|
    Bio::Log::CLI.trace('info')
  end
  
  o.on("--debug", "Show debug messages") do |v|
    Bio::Log::CLI.trace('debug')
  end

  o.separator ""

  o.on_tail('-h', '--help', 'Display this help and exit') do
    options[:show_help] = true
  end
end

begin
  opts.parse!(ARGV)

  if options[:show_help] 
    print opts
    print USAGE
  end

rescue OptionParser::InvalidOption => e
  options[:invalid_argument] = e.message
end

Bio::Log::CLI.configure('bio-alignment')
logger = Bio::Log::LoggerPlus['bio-alignment']
logger.info [options, ARGV]

ARGV.each do |fn|
  aln = Alignment.new
  Bio::FlatFile.auto(fn).each_entry do |entry|
    case options[:type]
      when :codon
        aln << CodonSequence.new(entry.entry_id,entry.seq)
      when :nucleotide 
        aln << Sequence.new(entry.entry_id,entry.seq)
      when :aminoacid
        aln << Sequence.new(entry.entry_id,entry.seq)
      else
        # auto uses BioRuby sequence type
        aln << entry
    end
  end
  case options[:edit]
    when :bridges
      logger.info "Apply delete bridges"
      require 'bio-alignment/edit/del_bridges'
      aln.extend(DelBridges)
      aln2 = aln.del_bridges
      aln = aln2
    when :islands
      logger.info "Apply mask islands filter"
      require 'bio-alignment/edit/mask_islands'
      aln.extend(MaskIslands)
      aln.each { |seq| seq.extend(State) }
      marked_aln = aln.mark_islands
      aln2 = marked_aln.update_each_element { |e| (e.state.masked? ? Element.new("X"):e)}
      aln = aln2
    when :info
      logger.info "Apply sequence information filter"
      require 'bio-alignment/edit/del_non_informative_sequences'
      aln.extend(DelNonInformativeSequences)
      aln.each { |seq| seq.extend(State) }
      aln2 = aln.del_non_informative_sequences(options[:perc])
      aln = aln2
    else 
      # do nothing
  end
  case options[:out]
    when :fasta
      aln.each do | seq |
        print ">",seq.id,"\n"
        if seq.kind_of?(CodonSequence) 
          if options[:style] == :codon
            print seq.to_s,"\n"
          else
            print seq.to_nt,"\n"
          end
        else
          print seq.to_s,"\n"
        end
      end
    else
      print aln
  end
end
