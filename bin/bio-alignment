#!/usr/bin/env ruby
#
# BioRuby bio-alignment Plugin
# Author:: Pjotr Prins
# Copyright:: 2012
# License:: The Ruby License

rootpath = File.dirname(File.dirname(__FILE__))
$: << File.join(rootpath,'lib')

_VERSION = File.new(File.join(rootpath,'VERSION')).read.chomp

$stderr.print "bio-alignment "+_VERSION+" Copyright (C) 2012 Pjotr Prins <pjotr.prins@thebird.nl>\n\n"

USAGE =<<EOU

bio-alignment transforms alignments

EOU

if ARGV.size == 0
  print USAGE
end

require 'bio-alignment'
require 'optparse'
require 'bio-logger'
include Bio::BioAlignment

log = Bio::Log::LoggerPlus.new 'bio-alignment'

Bio::Log::CLI.logger('stderr')
Bio::Log::CLI.trace('info')

options = {show_help: false}
options[:show_help] = true if ARGV.size == 0
opts = OptionParser.new do |o|
  o.banner = "Usage: #{File.basename($0)} [options] filename\n\n"

  o.on('--type codon|nucleotide|aminoacid', [:codon,:nucleotide,:aminoacid], 'Type of sequence data (default auto)') do |type|
    options[:type] = type.to_sym
  end

  o.on('--edit bridges', [:bridges], 'Apply edit function') do |edit|
    options[:edit] = edit.to_sym
  end

  o.separator ""

  o.on("--logger filename",String,"Log to file (default stderr)") do | name |
    Bio::Log::CLI.logger(name)
  end
  
  o.on("--trace options",String,"Set log level (default INFO, see bio-logger)") do | s |
    Bio::Log::CLI.trace(s)
  end
  
  o.on("-q", "--quiet", "Run quietly") do |q|
    Bio::Log::CLI.trace('error')
  end
  
  o.on("-v", "--verbose", "Run verbosely") do |v|
    Bio::Log::CLI.trace('info')
  end
  
  o.on("--debug", "Show debug messages") do |v|
    Bio::Log::CLI.trace('debug')
  end

  o.separator ""

  o.on_tail('-h', '--help', 'Display this help and exit') do
    options[:show_help] = true
  end
end

begin
  opts.parse!(ARGV)

  if options[:show_help] 
    print opts
    print USAGE
  end

rescue OptionParser::InvalidOption => e
  options[:invalid_argument] = e.message
end

Bio::Log::CLI.configure('bio-alignment')
logger = Bio::Log::LoggerPlus['bio-alignment']
logger.info [options, ARGV]

ARGV.each do |fn|
  aln = Alignment.new
  Bio::FlatFile.auto(fn).each_entry do |entry|
    aln << entry
  end
  print aln
end
